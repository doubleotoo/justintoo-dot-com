--- 
html: |-
  <p>So, about one month ago, I <a href="/monkey-patch-of-the-month-group_by">promised</a> to share some useful
  monkey patches every month. Here is the second one. Your own monkey patches are still more than
  welcome!</p>
  
  <p>I often find myself writing code like this:</p>
  <pre><span class="Keyword">class</span> <span class="Type">Foo</span>
    <span class="Statement">attr_reader</span> <span class="Constant">:bar</span>, <span class="Constant">:baz</span>
    <span class="PreProc">def</span> <span class="Function">initialize</span>(bar, baz)
      <span class="Identifier">@bar</span>, <span class="Identifier">@baz</span> = bar, baz
    <span class="PreProc">end</span>
  <span class="Keyword">end</span></pre>
  <p>This can be very annoying to maintain. The variable names are repeated four times, within three lines of code!</p>
  
  <p>Ideally, I&#39;d want to write something like this:</p>
  <pre><span class="Keyword">class</span> <span class="Type">Foo</span>
    attr_initializer <span class="Constant">:bar</span>, <span class="Constant">:baz</span>
  <span class="Keyword">end</span></pre>
  <p>Much better, if you ask me. Here is one example of how to do this.</p>
  <pre><span class="Keyword">class</span> <span class="Type">Class</span>
    <span class="PreProc">def</span> <span class="Function">attr_initializer</span>(*attributes)
      <span class="Statement">attr_reader</span> *attributes
      <span class="Statement">class_eval</span> &lt;&lt;-<span class="rubyStringDelimiter">RUBY</span>
  <span class="String">      def initialize(</span><span class="rubyInterpolationDelimiter">#{</span>attributes.join(<span class="rubyStringDelimiter">'</span><span class="String">, </span><span class="rubyStringDelimiter">'</span>)<span class="rubyInterpolationDelimiter">}</span><span class="String">)</span>
  <span class="String">        </span><span class="rubyInterpolationDelimiter">#{</span>attributes.map{ |<span class="Identifier">attribute</span>| <span class="rubyStringDelimiter">"</span><span class="String">@</span><span class="rubyInterpolationDelimiter">#{</span>attribute<span class="rubyInterpolationDelimiter">}</span><span class="rubyStringDelimiter">"</span> }.join(<span class="rubyStringDelimiter">'</span><span class="String">, </span><span class="rubyStringDelimiter">'</span>)<span class="rubyInterpolationDelimiter">}</span><span class="String"> = </span><span class="rubyInterpolationDelimiter">#{</span>attributes.join(<span class="rubyStringDelimiter">'</span><span class="String">, </span><span class="rubyStringDelimiter">'</span>)<span class="rubyInterpolationDelimiter">}</span>
  <span class="String">      end</span>
  <span class="String">    </span><span class="rubyStringDelimiter">RUBY</span>
    <span class="PreProc">end</span>
  <span class="Keyword">end</span></pre>
  <p>No piece of code is complete without tests, so this is it:</p>
  <pre><span class="Keyword">class</span> <span class="Type">AttrInitializerTests</span> &lt; <span class="Type">Test</span>::<span class="Type">Unit</span>::<span class="Type">TestCase</span>
  
    <span class="PreProc">def</span> <span class="Function">test_attr_initializer</span>
      klass = <span class="Type">Class</span>.new <span class="rubyControl">do</span>
        attr_initializer <span class="Constant">:foo</span>, <span class="Constant">:bar</span>
      <span class="rubyControl">end</span>
      object = klass.new(<span class="Number">1</span>, <span class="rubyStringDelimiter">'</span><span class="String">b</span><span class="rubyStringDelimiter">'</span>)
      assert_equal <span class="Number">1</span>, object.foo
      assert_equal <span class="rubyStringDelimiter">'</span><span class="String">b</span><span class="rubyStringDelimiter">'</span>, object.bar
    <span class="PreProc">end</span>
  
  <span class="Keyword">end</span></pre>
toc: []

introduction: |-
  <p>So, about one month ago, I <a href="/monkey-patch-of-the-month-group_by">promised</a> to share some useful
  monkey patches every month. Here is the second one. Your own monkey patches are still more than
  welcome!</p><p>I often find myself writing code like this:</p>
