--- 
html: |
  <p>After a long day in the train today, I extracted the I18n functionality from ActiveRecord so its applicable to any class. This can be especially handy if the source of the data is different, e.g. LDAP. Just install the plugin and add one line to your class to make it translatable:</p>
  <pre>./script/plugin <span class="Statement">install</span> git://github.com/iain/acts_as_translatable_model</pre><pre><span class="Keyword">class</span> <span class="Type">User</span>
    acts_as_translatable_model
  
    <span class="Statement">attr_accessor</span> <span class="Constant">:name</span>, <span class="Constant">:password</span>
  <span class="Keyword">end</span></pre>
  <p>Now you can do <a href="/translating-activerecord">familiar things</a> with the class, just as you would do with normal ActiveRecord models. Supply a translation:</p>
  <pre>nl<span class="Operator">-</span><span class="Identifier">NL</span><span class="Delimiter">:</span>
    <span class="Identifier">activerecord</span><span class="Delimiter">:</span>
      <span class="Identifier">models</span><span class="Delimiter">:</span>
        <span class="Identifier">user</span><span class="Delimiter">:</span> gebruiker
      <span class="Identifier">attributes</span><span class="Delimiter">:</span>
        <span class="Identifier">user</span><span class="Delimiter">:</span>
          <span class="Identifier">name</span><span class="Delimiter">:</span> naam
          <span class="Identifier">password</span><span class="Delimiter">:</span> wachtwoord</pre><pre><span class="Type">User</span>.human_name
  <span class="Comment"># =&gt; "gebruiker"</span>
  <span class="Type">User</span>.human_attribute_name(<span class="rubyStringDelimiter">"</span><span class="String">name</span><span class="rubyStringDelimiter">"</span>)
  <span class="Comment"># =&gt; "naam"</span></pre>
  <p>Of course, you can use inheritance, just as you would use Single Table Inheritance (STI).</p>
  
  <p>It also works nicely together with <a href="/form-labels-in-rails-22">i18n_label</a>. A simple example:</p>
  <pre><span class="Special">%</span><span class="Conditional">h1</span><span class="Special">=</span> translate <span class="Constant">:please_login</span>
  <span class="Special">-</span> form_for(<span class="Type">User</span>.new) <span class="rubyControl">do</span> |<span class="Identifier">f</span>|
    <span class="Special">=</span> f.label <span class="Constant">:name</span>
    <span class="Special">=</span> f.text_field <span class="Constant">:name</span>
    <span class="Special">=</span> f.label <span class="Constant">:password</span>
    <span class="Special">=</span> f.password_field <span class="Constant">:password</span>
    <span class="Special">=</span> submit_tag( translate(<span class="Constant">:login</span>) )</pre>
  <p>Hopefully, this will make your life a little bit easier.</p>

toc: []

introduction: <p>After a long day in the train today, I extracted the I18n functionality from ActiveRecord so its applicable to any class. This can be especially handy if the source of the data is different, e.g. LDAP. Just install the plugin and add one line to your class to make it translatable:</p>
