--- 
html: |
  <p>It has been some time, I know. It was a busy time. Since my last post I started working at <a href="http://finalist.com/">Finalist
  IT Group</a>, an exciting company doing exciting projects. Right now I&#39;m doing a
  very demanding project for Eindhoven city council, which is quite far away from my home (well, in
  Holland it is anyway).</p>
  
  <p>But time hasn&#39;t stopped. Ruby on Rails is busy advancing to version 2.2. One new feature in the
  upcoming Rails version has caught my eye and my undivided love and attention. It&#39;s the I18n-module
  built into Rails! It is already available if you&#39;re running edge.</p>
  
  <p>Rails 2.2 ships with it&#39;s language elements already indexed and a simple backend (called
  SimpleBackend) for handling translations. The whole idea is to keep it as simple as possible so
  any developer can implement their own way of doing the i18n-dance. The SimpleBackend keeps it
  translations in memory. Soon a new version of Globalize will arrive for storing translation in a
  database and no doubt a gettext based backend will appear soon too.</p>
  
  <p>Using the SimpleBackend, translating your database is dead easy. Amongst it&#39;s features are (in no
  particular order):</p>
  
  <ul>
  <li>Scoping, for sorting your keys and thus avoiding name clashes</li>
  <li>Bulk look up of multiple translations</li>
  <li>Default translations for when the translation hasn&#39;t been found</li>
  <li>Interpolation, inserting values in the middle of translations</li>
  <li>Pluralization, handling multiple translations depending on a value being plural or singular</li>
  <li>Having multiple default translation, for using another keys as default</li>
  <li>Localization of dates and times</li>
  </ul>
  
  <p>I can&#39;t go into each features into one post, so I&#39;ll be posting more in a while. First, let us take
  a look at the basics:</p>
  <pre><span class="Type">I18n</span>.store_translations( <span class="rubyStringDelimiter">'</span><span class="String">en-US</span><span class="rubyStringDelimiter">'</span>, { <span class="Constant">:hello</span> =&gt; <span class="rubyStringDelimiter">'</span><span class="String">hello</span><span class="rubyStringDelimiter">'</span> } )
  <span class="Type">I18n</span>.store_translations( <span class="rubyStringDelimiter">'</span><span class="String">nl-NL</span><span class="rubyStringDelimiter">'</span>, { <span class="Constant">:hello</span> =&gt; <span class="rubyStringDelimiter">'</span><span class="String">hallo</span><span class="rubyStringDelimiter">'</span> } )
  <span class="Type">I18n</span>.translate( <span class="Constant">:hello</span> ) <span class="Comment"># =&gt; "hello" (en-US is the default locale)</span>
  <span class="Type">I18n</span>.locale = <span class="rubyStringDelimiter">'</span><span class="String">nl-NL</span><span class="rubyStringDelimiter">'</span>
  <span class="Type">I18n</span>.translate( <span class="Constant">:hello</span> ) <span class="Comment"># =&gt; "hallo"</span></pre>
  <p>The big advantage is that I18n is now baked into Rails, so all you&#39;re favorite &quot;railties&quot; will
  automagically be translated (en-US translations are of course default and provided for, so you don&#39;t
  have to use I18n if you don&#39;t want to). Amongst others, cool stuff like date-formats, number and
  currency formatting and default ActiveRecord error messages are indexed. Here is an example:</p>
  <pre><span class="Type">I18n</span>.store_translations( <span class="rubyStringDelimiter">'</span><span class="String">nl-NL</span><span class="rubyStringDelimiter">'</span>, { <span class="Constant">:support</span> =&gt; { <span class="Constant">:array</span> =&gt; { <span class="Constant">:sentence_connector</span> =&gt; <span class="rubyStringDelimiter">'</span><span class="String">en</span><span class="rubyStringDelimiter">'</span> } } } )
  <span class="rubyStringDelimiter">%w{</span><span class="String">a b c</span><span class="rubyStringDelimiter">}</span>.to_sentence <span class="Comment"># =&gt; "a, b, en c" (look mama, no I18n.translate call!)</span></pre>
  <p>In date(and -time) objects you need to call the method localize to translate. You can define your
  own preferred formats too, so no more need for those ugly strftime method calls in your code.</p>
  <pre><span class="Type">I18n</span>.localize( <span class="Type">Time</span>.now, <span class="Constant">:format</span> =&gt; <span class="Constant">:long</span> ) <span class="Comment"># "vrijdag, 8 augustus 2008, 20:51:15"</span></pre>
  <p>ActiveRecord column names and error messages are easily translated too! You just have to know the
  proper scope. What you need to do is store translations in these scopes and Rails will automatically
  use it for you. In my opinion it is a bit of mess. Hopefully it&#39;ll be changed to something less
  scattered soon.</p>
  
  <p>In this example, I have a model called Post and it has an attribute named &#39;title&#39;.</p>
  
  <h3 id="toc_0">Update 1</h3>
  
  <p>The proper way to translate ActiveRecord is described <a href="/translating-activerecord">here!</a></p>
  <pre><span class="Type">I18n</span>.store_translations( <span class="rubyStringDelimiter">'</span><span class="String">en-US</span><span class="rubyStringDelimiter">'</span>, {
    <span class="Constant">:active_record</span> =&gt; {
      <span class="Constant">:error</span> =&gt; {
        <span class="Constant">:header_message</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">default message for error_messages_for</span><span class="rubyStringDelimiter">"</span>,
        <span class="Constant">:post</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">When the model name is not what you like</span><span class="rubyStringDelimiter">"</span>
      },
      <span class="Constant">:error_messages</span> =&gt; {
        <span class="Constant">:blank</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">your default 'cannot be blank' message</span><span class="rubyStringDelimiter">"</span>,
        <span class="Constant">:custom</span> =&gt; {
          <span class="Constant">:post</span> =&gt; {
            <span class="Constant">:title</span> =&gt; {
              <span class="Constant">:blank</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">error message for @post.title only</span><span class="rubyStringDelimiter">"</span>
            }
          }
        }
      },
      <span class="Constant">:human_attribute_names</span> =&gt; {
        <span class="Constant">:post</span> =&gt; {
          <span class="Constant">:title</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">Translation of the column name</span><span class="rubyStringDelimiter">"</span>
        }
      }
    }
  } )
  <span class="Type">I18n</span>.translate <span class="Constant">:'active_record.human_attribute_names.post.title'</span>
  <span class="Comment"># =&gt; "Translation of the column name"</span></pre>
  <p>Unfortunately there isn&#39;t a good list of which translations are available. I will try to make one
  soon.</p>
  
  <p>There are some limitations to the default I18n implementation. How you want to incorporate it in
  your site is completely up to you. Also, how and where you keep your translations has not been
  implemented. So you have to load a bunch of files yourself in which you keep translations.</p>
  
  <p>But it gets easier. I made a plugin, called <a href="http://github.com/iain/i18n_yaml/">i18n_yaml</a>,
  which handles all of this for you. It is not a different backend, but rather an extension to
  SimpleBackend. It stores its translation files in yaml-files found in app&#47;locales. It also provides
  a before_filter to find the appropriate locale. In other words: everything you need to make
  SimpleBackend useful! Like Rails 2.2, it is not finished yet, but you can have a go at it of course.</p>
  
  <p>Would you like to contribute to i18n? Join the
  <a href="http://groups.google.com/group/rails-i18n">mailinglist</a>. Rails i18n also launched it&#39;s own website:
  <a href="http://rails-i18n.org/">rails-i18n.org</a>. There are a number of tutorials and articles already
  available, listed <a href="http://rails-i18n.org/wiki">here</a>.</p>
  
  <p>This concludes the first part of the Rails i18n introduction. I&#39;ll be posting some more insights
  into i18n soon, so stay tuned!</p>
  
  <h3 id="toc_1">Update 2</h3>
  
  <p>Locate the locale.yml files in Rails to find all possible translations. Here is <a href="http://pastie.org/306532">a
  pastie</a> with everything translated to Dutch.</p>

toc: 
- anchor: "#toc_0"
  title: Update 1
- anchor: "#toc_1"
  title: Update 2
introduction: |-
  <p>It has been some time, I know. It was a busy time. Since my last post I started working at <a href="http://finalist.com/">Finalist
  IT Group</a>, an exciting company doing exciting projects. Right now I&#39;m doing a
  very demanding project for Eindhoven city council, which is quite far away from my home (well, in
  Holland it is anyway).</p><p>But time hasn&#39;t stopped. Ruby on Rails is busy advancing to version 2.2. One new feature in the
  upcoming Rails version has caught my eye and my undivided love and attention. It&#39;s the I18n-module
  built into Rails! It is already available if you&#39;re running edge.</p><p>Rails 2.2 ships with it&#39;s language elements already indexed and a simple backend (called
  SimpleBackend) for handling translations. The whole idea is to keep it as simple as possible so
  any developer can implement their own way of doing the i18n-dance. The SimpleBackend keeps it
  translations in memory. Soon a new version of Globalize will arrive for storing translation in a
  database and no doubt a gettext based backend will appear soon too.</p>
