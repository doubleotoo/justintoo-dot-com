--- 
html: |
  <p><strong>Updated October 10th, 2008 to be up to date with Rails 2.2 RC1 release.</strong></p>
  
  <p>With Rails 2.2 releasing any day now, I want to show you how to translate ActiveRecord related
  stuff. It is quite easy, once you know where to keep your translations. Here is a complete guide to
  using all built in translation methods!</p>
  
  <h3 id="toc_0">Scenario</h3>
  
  <p>Suppose we&#39;re building a forum. A forum has several types (e.g. admin) of users and suppose we want
  to make the most important users into separate models using Single Table Inheritance (sti). This
  gives us the most complete scenario in showing off all translations:</p>
  <pre><span class="Keyword">class</span> <span class="Type">User</span> &lt; <span class="Type">ActiveRecord</span>::<span class="Type">Base</span>
    validates_presence_of <span class="Constant">:name</span>, <span class="Constant">:email</span>, <span class="Constant">:encrypted_password</span>, <span class="Constant">:salt</span>
    validates_uniqueness_of <span class="Constant">:email</span>, <span class="Constant">:message</span> =&gt; <span class="Constant">:already_registered</span>
  <span class="Keyword">end</span>
  
  <span class="Keyword">class</span> <span class="Type">Admin</span> &lt; <span class="Type">User</span>
    validate <span class="Constant">:only_men_can_be_admin</span>
  <span class="Statement">private</span>
    <span class="PreProc">def</span> <span class="Function">only_men_can_be_admin</span>
      errors.add(<span class="Constant">:gender</span>, <span class="Constant">:chauvinistic</span>, <span class="Constant">:default</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">This is a chauvinistic error message</span><span class="rubyStringDelimiter">"</span>) <span class="Conditional">unless</span> gender == <span class="rubyStringDelimiter">'</span><span class="String">m</span><span class="rubyStringDelimiter">'</span>
    <span class="PreProc">end</span>
  <span class="Keyword">end</span></pre>
  <h3 id="toc_1">Setting up</h3>
  
  <p>Make sure you&#39;re running Rails 2.2 or Rails edge (<code>rake rails:freeze:edge</code>)</p>
  
  <p>Now let&#39;s translate all this into <a href="http://icanhascheezburger.com">LOLCAT</a>, just for fun. We need a
  directory to place the locale files:</p>
  <pre><span class="Statement">mkdir</span> app/locales</pre>
  <p>And we need to load all files as soon as the application starts. So we make an initializer:</p>
  <pre><span class="Comment"># config/initializers/load_translations.rb</span>
  <span class="rubyStringDelimiter">%w{</span><span class="String">yml rb</span><span class="rubyStringDelimiter">}</span>.each <span class="rubyControl">do</span> |<span class="Identifier">type</span>|
    <span class="Type">I18n</span>.load_path += <span class="Type">Dir</span>.glob(<span class="rubyStringDelimiter">"</span><span class="rubyInterpolationDelimiter">#{</span><span class="Type">RAILS_ROOT</span><span class="rubyInterpolationDelimiter">}</span><span class="String">/app/locales/**/*.</span><span class="rubyInterpolationDelimiter">#{</span>type<span class="rubyInterpolationDelimiter">}</span><span class="rubyStringDelimiter">"</span>)
  <span class="rubyControl">end</span>
  <span class="Type">I18n</span>.default_locale = <span class="rubyStringDelimiter">'</span><span class="String">LOL</span><span class="rubyStringDelimiter">'</span></pre>
  <p>This approach is recommended, because loading files is not something you want to do during the
  request, when it should already be available. Setting you&#39;re locale like this is probably not
  recommended, but it&#39;s easy, if you&#39;re just using one language.</p>
  
  <h3 id="toc_2">Translating models</h3>
  
  <p>Next, we&#39;re going to make some simple translation files. All ActiveRecord translations need to be in
  the activerecord scope. So when starting your locale file, it starts with the locale name, followed
  by the scope.</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">models</span><span class="Special">:</span>
        <span class="Identifier">user</span><span class="Special">:</span> kitteh
        <span class="Identifier">admin</span><span class="Special">:</span> Ceiling cat</pre>
  <p>Let&#39;s try this out in <code>script&#47;console</code></p>
  <pre><span class="Type">User</span>.human_name
  <span class="Comment"># =&gt; "kitteh"</span>
  <span class="Type">Admin</span>.human_name
  <span class="Comment"># =&gt; "Ceiling cat"</span></pre>
  <p>It&#39;s nice to know that the method <code>human_name</code> is used by error messages in validations too. But
  we&#39;ll come to that in just a second.</p>
  
  <p>If you didn&#39;t specify the translation of admin, it would have used the translation of user, because it inherited it.</p>
  
  <h3 id="toc_3">Translating attributes</h3>
  
  <p>We could append to the same file, but I choose to make a new file, because it keeps this post clean
  and it&#39;s a bit easier to see how the scoping works.</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">attributes</span><span class="Special">:</span>
        <span class="Identifier">user</span><span class="Special">:</span>
          <span class="Identifier">name</span><span class="Special">:</span> naem
          <span class="Identifier">email</span><span class="Special">:</span> emale</pre>
  <p>And let&#39;s try this again:</p>
  <pre><span class="Type">User</span>.human_attribute_name(<span class="rubyStringDelimiter">"</span><span class="String">name</span><span class="rubyStringDelimiter">"</span>)
  <span class="Comment"># =&gt; "naem"</span>
  <span class="Type">Admin</span>.human_attribute_name(<span class="rubyStringDelimiter">"</span><span class="String">email</span><span class="rubyStringDelimiter">"</span>)
  <span class="Comment"># =&gt; "emale"</span></pre>
  <p>Once again, you can see that single table inheritance helps us with this.</p>
  
  <p>Both human_name and human_attribute cannot really fail, because if no translation has been
  specified, it would return the normal humanized version. So if you&#39;re making an English site, you
  don&#39;t really need to translate models and attributes.</p>
  
  <h3 id="toc_4">Translating default validations</h3>
  
  <p>Let&#39;s translate a few default messages:</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">errors</span><span class="Special">:</span>
        <span class="Identifier">messages</span><span class="Special">:</span>
          <span class="Identifier">blank</span><span class="Special">:</span> <span class="String">"</span><span class="String">can not has nottin</span><span class="String">"</span></pre><pre>u = <span class="Type">User</span>.new
  <span class="Comment"># =&gt; #&lt;User id: nil, etc&gt;</span>
  u.valid?
  <span class="Comment"># =&gt; false</span>
  u.errors.on(<span class="Constant">:name</span>)
  <span class="Comment"># =&gt; "can not has nottin"</span></pre>
  <h3 id="toc_5">Interpolation in validations</h3>
  
  <p>You have more freedom in your validation messages now. With every message you can interpolate the
  translated name of the model, the attribute and the value. The variable &#39;count&#39; is also available
  where applicable (e.g. <code>validates_length_of</code>)</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">errors</span><span class="Special">:</span>
        <span class="Identifier">messages</span><span class="Special">:</span>
          <span class="Identifier">already_registered</span><span class="Special">:</span> <span class="String">"</span><span class="String">u already is {{model}}</span><span class="String">"</span></pre><pre>u.errors.on(<span class="Constant">:email</span>)
  <span class="Comment"># =&gt; "u already is kitteh"</span></pre>
  <p>Remember to put quotes around the translation key in yaml, because it&#39;ll fail without it, when using
  the interpolation brackets.</p>
  
  <h3 id="toc_6">Model specific messages</h3>
  
  <p>A message specified in the activerecord.errors.models scope overrides the translation of this kind
  of message for the entire model.</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">errors</span><span class="Special">:</span>
        <span class="Identifier">messages</span><span class="Special">:</span>
          <span class="Identifier">blank</span><span class="Special">:</span> <span class="String">"</span><span class="String">can not has nottin</span><span class="String">"</span>
        <span class="Identifier">models</span><span class="Special">:</span>
          <span class="Identifier">admin</span><span class="Special">:</span>
            <span class="Identifier">blank</span><span class="Special">:</span> <span class="String">"</span><span class="String">want!</span><span class="String">"</span></pre><pre>u.errors.on(<span class="Constant">:name</span>)
  <span class="Comment"># =&gt; "can has nottin"</span>
  a = <span class="Type">Admin</span>.new
  <span class="Comment"># =&gt; #&lt;Admin id: nil, etc&gt;</span>
  a.valid?
  <span class="Comment"># =&gt; false</span>
  a.errors.on(<span class="Constant">:salt</span>)
  <span class="Comment"># =&gt; "want!"</span></pre>
  <h3 id="toc_7">Attribute specific messages</h3>
  
  <p>Any translation in the activerecord.errors.models.model_name.attributes scope overrides model
  specific attribute- and default messages.</p>
  <pre><span class="Identifier">LOL</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">errors</span><span class="Special">:</span>
        <span class="Identifier">models</span><span class="Special">:</span>
          <span class="Identifier">admin</span><span class="Special">:</span>
            <span class="Identifier">blank</span><span class="Special">:</span> <span class="String">"</span><span class="String">want!</span><span class="String">"</span>
            <span class="Identifier">attributes</span><span class="Special">:</span>
              <span class="Identifier">salt</span><span class="Special">:</span>
                <span class="Identifier">blank</span><span class="Special">:</span> <span class="String">"</span><span class="String">is needed for cheezburger</span><span class="String">"</span></pre><pre>a.errors.on(<span class="Constant">:name</span>)
  <span class="Comment"># =&gt; "want!"</span>
  a.errors.on(<span class="Constant">:salt</span>)
  <span class="Comment"># =&gt; "is needed for cheezburger"</span></pre>
  <h3 id="toc_8">Defaults</h3>
  
  <p>When you specify a symbol as the default option, it will be translated like a normal error message,
  just like you&#39;ve seen with <code>:already_registered</code>. When default hasn&#39;t been found, it&#39;ll try looking
  up the normal key you have given. With <code>:already_registered</code>, that key has already been set by
  Rails, because we&#39;re using <code>validates_uniqueness_of</code>.</p>
  
  <p>When you specify a string as default value, it&#39;ll use this when no translations have otherwise been
  found.</p>
  <pre>a.gender = <span class="rubyStringDelimiter">'</span><span class="String">f</span><span class="rubyStringDelimiter">'</span>
  <span class="Comment"># =&gt; "f"</span>
  a.valid?
  <span class="Comment"># =&gt; false</span>
  a.errors.on(<span class="Constant">:gender</span>)
  <span class="Comment"># =&gt; "This is a chauvinistic error message"</span></pre>
  <h3 id="toc_9">Using error_messages_for</h3>
  
  <p>When you want to display the error messages in a model in a view, most people will user
  error_messages_for. These messages are also translated. The message has a header and a single line,
  saying how many errors there are. Here are the default English translations of these messages. I
  will leave it up to you to translate it to LOLCAT. Win a lifetime supply of cheezburgerz* with this
  mini-competition ;)</p>
  <pre><span class="Identifier">en-US</span><span class="Special">:</span>
    <span class="Identifier">activerecord</span><span class="Special">:</span>
      <span class="Identifier">errors</span><span class="Special">:</span>
        <span class="Identifier">template</span><span class="Special">:</span>
          <span class="Identifier">header</span><span class="Special">:</span>
            <span class="Identifier">one</span><span class="Special">:</span> <span class="String">"</span><span class="String">1 error prohibited this {{model}} from being saved</span><span class="String">"</span>
            <span class="Identifier">other</span><span class="Special">:</span> <span class="String">"</span><span class="String">{{count}} errors prohibited this {{model}} from being saved</span><span class="String">"</span>
          <span class="Identifier">body</span><span class="Special">:</span> <span class="String">"</span><span class="String">There were problems with the following fields:</span><span class="String">"</span></pre>
  <p>There is one slight problem with the messages it displays. <code>error_messages_for</code> uses the
  <code>errors.full_messages</code> in it&#39;s list. This means that the attribute names will be put before it. Of
  course these will be translated with <code>human_attribute_name</code>, but it might not always be desirable.
  In other languages than English it&#39;s sometimes hard to formulate a nice error message with the
  attribute name at the beginning. This will have to be fixed in later Rails versions.</p>
  
  <h3 id="toc_10">Conclusion</h3>
  
  <p>I hope you&#39;ll agree with me that these translation options for ActiveRecord are really nice! This
  is what we have been waiting for. Too bad I was a bit too late with my adjustments, so form labels
  don&#39;t translate by default. I did build it, but Rails was already feature frozen by then. I will
  probably post a plugin that adds this functionality. Same goes for a i18n version of scaffold.</p>
  
  <p>Please keep coming back to my site, or add the RSS feed to your favorite reader.</p>
  
  <p>Of course, stay in touch with the <a href="http://groups.google.com/group/rails-i18n">i18n mailinglist</a>. A
  lot of people are putting a lot of effort into the project. New plugins and gems solving problems
  problems rapidly. I18n is one of the more difficult things to do, so if you have a special insight
  in a language, please contribute!</p>
  
  <p><strong>Happy devving!</strong></p>
  
  <p>PS. Damn! I wish I was in <a href="http://en.oreilly.com/railseurope2008/public/content/home">Berlin</a> right now!</p>
  
  <p style="font-size: 40%">* invisible cheezburgerz only</p>
  
  <h3 id="toc_11">Update</h3>
  
  <p>This post is old. Still, after 2 years, it still accounts for 10% of my daily traffic. How cool is
  that? Seriously though, read the <a href="http://guides.rubyonrails.org/i18n.html">official Rails guide</a> on
  this subject, for up to date information!</p>

toc: 
- anchor: "#toc_0"
  title: Scenario
- anchor: "#toc_1"
  title: Setting up
- anchor: "#toc_2"
  title: Translating models
- anchor: "#toc_3"
  title: Translating attributes
- anchor: "#toc_4"
  title: Translating default validations
- anchor: "#toc_5"
  title: Interpolation in validations
- anchor: "#toc_6"
  title: Model specific messages
- anchor: "#toc_7"
  title: Attribute specific messages
- anchor: "#toc_8"
  title: Defaults
- anchor: "#toc_9"
  title: Using error_messages_for
- anchor: "#toc_10"
  title: Conclusion
- anchor: "#toc_11"
  title: Update
introduction: |-
  <p><strong>Updated October 10th, 2008 to be up to date with Rails 2.2 RC1 release.</strong></p><p>With Rails 2.2 releasing any day now, I want to show you how to translate ActiveRecord related
  stuff. It is quite easy, once you know where to keep your translations. Here is a complete guide to
  using all built in translation methods!</p>
