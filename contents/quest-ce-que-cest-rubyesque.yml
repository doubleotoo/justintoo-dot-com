--- 
html: |
  <p>This is a translation of <a href="http://blog.finalist.com/2010/04/12/quest-ce-que-cest-rubyesque/">the post I originally wrote down in
  Dutch</a> for my company.</p>
  
  <p>I recently gave a presentation at my company Finalist IT Group about the philosophy behind Ruby.
  Code written with this philosophy in mind is called &#39;Rubyesque&#39;. It&#39;s not hard science, so we had
  plenty ingredients for a discussion.</p>
  
  <p>The reason behind the presentation was because we&#39;re in need of more Ruby developers and looked
  inside our own company for Java developers that want to learn Ruby. Because Java and the philosophy
  behind it are so radically different from Ruby, we organized a discussion to explore those
  differences.</p>
  
  <h3 id="toc_0">About programming and the &#39;flow&#39;</h3>
  
  <p>The Rubyesque mindset is all about opinions. Opinions tend to vary from person to person. By reading
  a lot of blogs and code I do see some sort of consensus. This opinion is not always explicitly
  mentioned, so I don&#39;t pretend to speak in absolute truths or be complete.</p>
  
  <p>Programming is usually compared with other professions to give an idea what it&#39;s like to do it. Ruby
  programmers tend to compare programming with craftsmanship. I even go one step further. I think
  programming Ruby is a form of art of playing an instrument. Programming is a creative process.
  You&#39;re programming to express meaning and intent. The only way to achieve this, is if you know your
  instrument so intensely that it&#39;s not compromising you&#39;re ability to express yourself.</p>
  
  <p>Every programming language has its own style. You can call it its &#39;flow&#39;.
  It&#39;s wise to go with the flow. It&#39;s easier to use the language as it&#39;s
  intended to be used than to go against it. For example, don&#39;t try to force
  <a href="http://en.wikipedia.org/wiki/Class-based_programming">inheritance</a> in a language that is intended
  to be <a href="http://en.wikipedia.org/wiki/Prototype-based_programming">prototype based</a>. Program according
  to the flow and other programmers can understand and maintain your code better.</p>
  
  <h3 id="toc_1">About Ruby</h3>
  
  <p>Everything in Ruby is aimed towards making the programmer happy. A happy programmer is better
  motivated to deliver great code and will feel responsible to do so. And better code makes everyone
  happy.</p>
  
  <p>It&#39;s the machine that is supposed to do the heavy lifting, not the programmer. This means that Ruby
  isn&#39;t particularly fast, but since machine power is cheaper than man power, it&#39;s not that big of a
  deal.</p>
  
  <p>Ruby has a couple of traits that make it a joy to work with:</p>
  
  <ul>
  <li>Dynamic and open to bend it to your liking</li>
  <li>Few rules, so easy to learn</li>
  <li>There are &#39;shortcuts&#39; for common tasks</li>
  <li>Many ways to reuse code, such as mixins</li>
  <li>Optional punctuation to improve readability</li>
  <li>Methods like <a href="http://www.rubyist.net/%7Eslagell/ruby/accessors.html">attr_accessor</a> to become more <a href="http://en.wikipedia.org/wiki/DRY">DRY</a></li>
  </ul>
  
  <h3 id="toc_2">Dynamic</h3>
  
  <p>In a dynamic language it&#39;s not important to know which type of object you&#39;re dealing
  with, but it&#39;s more important to know what it can do for you. This is called <a href="http://en.wikipedia.org/wiki/Duck_typing">duck
  typing</a>. This isn&#39;t only handy in making mock object, but
  also means that you don&#39;t have to abuse inheritance to comply to some method you&#39;d like to call.</p>
  
  <p>A nice example is the Rack specification. The header object you&#39;re supposed to return needs to have
  the method <code>each</code>. It doesn&#39;t say that it needs to be a hash. You could use a hash, but if it makes
  more in your sense to have some other object, it&#39;s fine. You don&#39;t have to inherit from hash, just
  to implement the <code>each</code> method.</p>
  
  <p>The <em>flow</em> in Ruby is not to perform any check of the objects. If you&#39;re explicitly want an integer,
  just call <code>to_i</code> inside the method. Any code that checks the type is usually considered to be
  distracting from the real meaning of the code. It&#39;s the programmer that uses the gem&#47;library
  responsibility to use the right objects, and not the responsibility of the gem-maker. The naming of
  methods and variables need to be obvious enough, so that it shouldn&#39;t be a guessing game.</p>
  
  <h3 id="toc_3">Open</h3>
  
  <p>In Ruby, nothing is final. This allows for the ability to add and change anything
  in any object, including core classes. This is called Monkey Patching or <a href="http://en.wikipedia.org/wiki/Duck_punching">duck
  punching</a>. This results in even nicer and more readable
  code, like:</p>
  <pre><span class="Number">15</span>.minutes.ago</pre>
  <p>Nobody needs to explain this. Nobody needs to look up any documents to understand what is going on
  here. Monkey patching can improve the readability of the code immensely.</p>
  
  <p>I understand that this technique may be considered extreme by some people. It doesn&#39;t comply to the
  strict rules that govern most other languages. Still, these kinds of techniques are very handy and
  addicting.</p>
  
  <p>Monkey patching is dangerous. It&#39;s your own responsibility to use it responsible. Use tests to
  ensure that you don&#39;t break anything unintentionally.</p>
  
  <h3 id="toc_4">Punctuation</h3>
  
  <p>Some of Ruby&#39;s punctuation is optional. Ruby programmers love to leave them out. It&#39;s mostly a
  matter of taste. Readability is key here.</p>
  
  <p>Rubyists rather write this:</p>
  <pre><span class="Keyword">class</span> <span class="Type">Post</span>
    belongs_to <span class="Constant">:author</span>, <span class="Constant">:dependent</span> =&gt; <span class="Constant">:destroy</span>
  <span class="Keyword">end</span></pre>
  <p>Than the same code with all punctuation visible:</p>
  <pre><span class="Keyword">class</span> <span class="Type">Post</span>
    belongs_to(<span class="Constant">:author</span>, {<span class="Constant">:dependent</span> =&gt; <span class="Constant">:destroy</span>})
  <span class="Keyword">end</span></pre>
  <p>It&#39;s not important that <tt>{:dependent =&gt; :destroy}</tt> is a hash. Nor is it important that
  <code>belong_to</code> is a method, and that it takes two arguments. It&#39;s much more important that the post
  belongs to an author and that the post will be destroyed when the author is being destroyed.</p>
  
  <p>By not using all the possible punctuation, it becomes easier for our brains to focus on <em>what</em> is
  actually written, rather that <em>which objects</em> might be used to express it.</p>
  
  <h3 id="toc_5">Few rules, many shortcuts</h3>
  
  <p>There are only a few genuine language constructs. There are just three elements in the language that
  have any real meaning. Those are objects, methods and blocks&#47;closures. The only way in which classes
  and modules are special is by their implementation, but they are still regular objects. There are
  just a few other constructs, most notably <code>if</code>, <code>while</code> and the logic operators like <code>&amp;&amp;</code> and <code>||</code>.</p>
  
  <p>The rest of the keywords you see are just shortcuts, you can type to perform common tasks. Like
  defining a class:</p>
  <pre><span class="Keyword">class</span> <span class="Type">Car</span> &lt; <span class="Type">Vehicle</span>
    <span class="Comment"># ...</span>
  <span class="Keyword">end</span></pre>
  <p>The Ruby interpreter reads this as:</p>
  <pre><span class="Type">Car</span> = <span class="Type">Class</span>.new(<span class="Type">Vehicle</span>) <span class="rubyControl">do</span>
    <span class="Comment"># ...</span>
  <span class="rubyControl">end</span></pre>
  <p>Defining a class is actually just a method called on an object. The first argument is another object
  (the class to inherit from) and the second argument is a block. You can write it like this if you
  want to and play with it too, like dynamically making many different classes.</p>
  
  <p>Some other examples:</p>
  <pre>counter += <span class="Number">1</span>           <span class="Comment"># this is a shortcut</span>
  counter = counter + <span class="Number">1</span>  <span class="Comment"># without the shortcut, but also without punctuation</span>
  counter = counter.+(<span class="Number">1</span>) <span class="Comment"># without the shortcut and with all punctuation (yes, + is just a method)</span></pre><pre><span class="Identifier">@user</span> ||= <span class="Type">User</span>.new        <span class="Comment"># this is called a 'teapot'-operator or 'or-or-equals'</span>
  <span class="Identifier">@user</span> = <span class="Identifier">@user</span> || <span class="Type">User</span>.new <span class="Comment"># assign @user to @user if it exists, otherwise create a new user</span></pre><pre><span class="rubyControl">exit</span> <span class="Conditional">unless</span> busy <span class="rubyControl">or</span> cancelled  <span class="Comment"># 'unless' is a shortcut for 'if !()'</span>
  <span class="rubyControl">exit</span> <span class="Conditional">if</span> !(busy <span class="rubyControl">or</span> cancelled)   <span class="Comment"># 'if' at the end of a sentence is also a shortcut</span>
  <span class="Conditional">if</span> !(busy <span class="rubyControl">or</span> cancelled)        <span class="Comment"># for a regular if</span>
    <span class="rubyControl">exit</span>
  <span class="Conditional">end</span></pre>
  <p>There are many more shortcuts. But why? Why are there so many ways to do the same thing? It&#39;s not
  just readability, but also the ease in which you can translate the ideas in your head to code.</p>
  
  <p>The smaller the difference between your thoughts and your code, the easier it is to program. Ruby
  gives you full freedom to express yourself how you feel fit. That doesn&#39;t mean it always works out.
  If you have an unclear image of the problem you&#39;re trying to solve, the code you write will be
  unclear too. Nothing stops you to write bad code. Ruby doesn&#39;t force you in any way. These things
  cut both ways.</p>
  
  <h3 id="toc_6">Exposing intention</h3>
  
  <p>Code needs to expose its intent. Ruby code is Rubyesque if it uses the above mentioned techniques to
  expose its intent. Because Ruby has such clean syntax, most DSLs (Domain Specific Languages) will be
  written in Ruby. These kinds of DSLs are called internal.</p>
  
  <p>The naming of variables and methods is extremely important. The meaning of the code must be clear
  the first time you read it.</p>
  
  <p>A fantastic example is <a href="http://rspec.info">Rspec</a>, my favorite test framework.</p>
  <pre>describe <span class="Type">Post</span> <span class="rubyControl">do</span>
  
    context <span class="rubyStringDelimiter">"</span><span class="String">when it's not approved</span><span class="rubyStringDelimiter">"</span> <span class="rubyControl">do</span>
      subject { <span class="Type">Post</span>.new(<span class="Constant">:approved</span> =&gt; <span class="Constant">false</span>) }
      it { should_not be_publishable }
    <span class="rubyControl">end</span>
  
    context <span class="rubyStringDelimiter">"</span><span class="String">when it's approved</span><span class="rubyStringDelimiter">"</span> <span class="rubyControl">do</span>
      subject { <span class="Type">Post</span>.new(<span class="Constant">:approved</span> =&gt; <span class="Constant">true</span>) }
      it { should be_publishable }
    <span class="rubyControl">end</span>
  
  <span class="rubyControl">end</span></pre>
  <p>The entire Ruby bag of tricks is being used to make it as natural as possible to write down your
  specifications. This example doesn&#39;t like like regular Ruby code, but it still is. It&#39;s nothing more
  than objects, methods and blocks.</p>
  
  <p>This is very Rubyesque. There is almost no distraction from the meaning of the code. I can plainly
  read if my code still does what my customer wants and I can run the specs to see if my code does
  what I specified it to do. And even nicer: it&#39;s incredibly easy! Rspec makes Test Driven Development
  very easy.</p>
  
  <p>If you&#39;re interested in the code to implement this example, take a look at <a href="http://gist.github.com/362030">this
  gist</a>.</p>
  
  <h3 id="toc_7">Succinct and Concise</h3>
  
  <p>Rubyesque code is succinct. That doesn&#39;t just mean short lines (I try to limit myself to
  about 80 or 100 characters per line), but also about short methods. The code smell detector
  <a href="http://wiki.github.com/kevinrutherford/reek/">Reek</a> will raise a warning if your method is longer
  than 6 lines. Does this means you are not allowed to write longer methods? Of course not. Is it a
  good idea? No.</p>
  
  <p>People are better at understanding short sentences. And it&#39;s the people that need to understand the
  code and maintain. And we&#39;re back to the philosophy behind Ruby. It&#39;s meant to be understandable for
  people. It&#39;s less important if the computer needs to do some extra work.</p>
  
  <h3 id="toc_8">Conclusion</h3>
  
  <p>Ruby is a free language. You can bend the rules. The goal is to make you happy. Ruby was made to
  make you happy, to close the gap between human and computer language. Try to do that in the code you
  write too, it works!</p>
  
  <p>I found that most people coming from languages like Java or PHP find Ruby a weird or magical
  language. That is only the appearance. Ruby is very easy to learn. It has few rules. Ruby
  programmers don&#39;t code using rigid rules and dogmas, but experiment solving the same problem in
  different ways.</p>
  
  <p>I hope you got some idea of what it means to program Rubyesque. I advise everybody to look at the
  different languages and their philosophies. See what philosophy suits you. If the Ruby philosophy
  suits you and you have the discipline needed to write Ruby, give it a try! Ruby transformed the way
  I feel about my job and never regretted learning it one bit.</p>

toc: 
- anchor: "#toc_0"
  title: About programming and the 'flow'
- anchor: "#toc_1"
  title: About Ruby
- anchor: "#toc_2"
  title: Dynamic
- anchor: "#toc_3"
  title: Open
- anchor: "#toc_4"
  title: Punctuation
- anchor: "#toc_5"
  title: Few rules, many shortcuts
- anchor: "#toc_6"
  title: Exposing intention
- anchor: "#toc_7"
  title: Succinct and Concise
- anchor: "#toc_8"
  title: Conclusion
introduction: |-
  <p>This is a translation of <a href="http://blog.finalist.com/2010/04/12/quest-ce-que-cest-rubyesque/">the post I originally wrote down in
  Dutch</a> for my company.</p><p>I recently gave a presentation at my company Finalist IT Group about the philosophy behind Ruby.
  Code written with this philosophy in mind is called &#39;Rubyesque&#39;. It&#39;s not hard science, so we had
  plenty ingredients for a discussion.</p><p>The reason behind the presentation was because we&#39;re in need of more Ruby developers and looked
  inside our own company for Java developers that want to learn Ruby. Because Java and the philosophy
  behind it are so radically different from Ruby, we organized a discussion to explore those
  differences.</p>
