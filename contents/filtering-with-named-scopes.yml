--- 
html: |
  <p>Suppose you have an index page with people and you want to have a series of neat filters to show a
  selection of people. For example only the people still alive of only the adults. How would one do
  that?</p>
  
  <p>I like the method of using a
  <a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/named_scope">named_scope</a> and
  delegating to specified filters. This way, you can structure your filters properly and get clean
  URLs. Also, you can chain other named scopes to the filter.</p>
  
  <p>This is an example of how I would do that.</p>
  
  <h3 id="toc_0">The view</h3>
  
  <p>In your index view, add a list of all filters:</p>
  <pre><span class="Special">%</span><span class="Conditional">h3</span><span class="Special">=</span> t(<span class="Constant">:people</span>, <span class="Constant">:scope</span> =&gt; <span class="Constant">:filter_titles</span>)
  <span class="Special">%</span><span class="Conditional">ul</span>
    <span class="Special">-</span> <span class="Type">Person</span>.available_filters.each <span class="rubyControl">do</span> |<span class="Identifier">filter</span>|
      <span class="Special">%</span><span class="Conditional">li</span><span class="Special">=</span> link_to t(filter, <span class="Constant">:scope</span> =&gt; [<span class="Constant">:filter_names</span>, <span class="Constant">:people</span>]), people_path(<span class="Constant">:filter</span> =&gt; filter)</pre>
  <p>This will generate links that go to your index page (e.g. <code>&#47;people?filter=adults</code>). You can even
  make a route that will clean up your views even more.</p>
  <pre>map.connect <span class="rubyStringDelimiter">"</span><span class="String">/people/filter/:filter</span><span class="rubyStringDelimiter">"</span>, <span class="Constant">:controller</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">people</span><span class="rubyStringDelimiter">"</span>, <span class="Constant">:action</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">index</span><span class="rubyStringDelimiter">"</span></pre>
  <p>I use i18n to get the displayed link text for each link, so my locale file might look something
  like:</p>
  <pre><span class="Identifier">en</span><span class="Special">:</span>
    <span class="Identifier">filter_titles</span><span class="Special">:</span>
      <span class="Identifier">people</span><span class="Special">:</span> Select a subset
    <span class="Identifier">filter_names</span><span class="Special">:</span>
      <span class="Identifier">people</span><span class="Special">:</span>
        <span class="Identifier">deceased</span><span class="Special">:</span> Select deceased people
        <span class="Identifier">alive</span><span class="Special">:</span> Select people that are (still) alive
        <span class="Identifier">adults</span><span class="Special">:</span> Select people over <span class="Number">18</span></pre>
  <h3 id="toc_1">The controller</h3>
  
  <p>Add the <code>named_scope</code> to your query:</p>
  <pre><span class="PreProc">def</span> <span class="Function">index</span>
    <span class="Identifier">@people</span> = <span class="Type">Person</span>.filter(params[<span class="Constant">:filter</span>]).paginate(<span class="Constant">:page</span> =&gt; params[<span class="Constant">:page</span>])
  <span class="PreProc">end</span></pre>
  <h3 id="toc_2">The model</h3>
  
  <p>Here&#39;s the interesting stuff. Define the available filters as a class method:</p>
  <pre><span class="PreProc">def</span> <span class="Constant">self</span>.<span class="Function">available_filters</span>
    [ <span class="Constant">:deceased</span>, <span class="Constant">:alive</span>, <span class="Constant">:adults</span> ]
  <span class="PreProc">end</span></pre>
  <p>Then, define class methods for each those filters, specifying what they need to
  do. I like to prepend them with &quot;<code>filter_</code>&quot;, so it shows more intent. You can go
  crazy with these filter methods if you&#39;d like. Just return valid <a href="http://apidock.com/rails/ActiveRecord/Base/find/class">ActiveRecord
  find-options</a>.</p>
  <pre><span class="PreProc">def</span> <span class="Constant">self</span>.<span class="Function">filter_deceased</span>
    { <span class="Constant">:conditions</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">deceased_on IS NOT NULL</span><span class="rubyStringDelimiter">"</span> }
  <span class="PreProc">end</span></pre><pre><span class="PreProc">def</span> <span class="Constant">self</span>.<span class="Function">filter_alive</span>
    { <span class="Constant">:conditions</span> =&gt; <span class="rubyStringDelimiter">"</span><span class="String">deceased_on IS NULL</span><span class="rubyStringDelimiter">"</span> }
  <span class="PreProc">end</span>
  
  <span class="PreProc">def</span> <span class="Constant">self</span>.<span class="Function">filter_adults</span>
    { <span class="Constant">:conditions</span> =&gt; [<span class="rubyStringDelimiter">"</span><span class="String">birthday &lt;= ?</span><span class="rubyStringDelimiter">"</span>, <span class="Number">18</span>.years.ago.to_date] }
  <span class="PreProc">end</span></pre>
  <p>And finally, add the named scope that uses these filters:</p>
  <pre>named_scope <span class="Constant">:filter</span>, <span class="Keyword">lambda</span> { |<span class="Identifier">f</span>| available_filters.include?(f) ? send(<span class="rubyStringDelimiter">"</span><span class="String">filter_</span><span class="rubyInterpolationDelimiter">#{</span>f<span class="rubyInterpolationDelimiter">}</span><span class="rubyStringDelimiter">"</span>) : {} }</pre>
  <p>We check to see if the filter is available, excluding any invalid filter. Also, by default no filter
  is given from the controller. Then <code>params[:filter]</code> will be <code>nil</code> and so it won&#39;t try to call
  <code>Person.filter_</code>. You can replace the empty hash with a default filter if you like.</p>
  
  <h3 id="toc_3">Conclusion</h3>
  
  <p>These predefined filters can really help the usability of your new fancy web application. And I like
  the code too, because it looks very clear and it&#39;s easy to test.</p>
  
  <p>Named scopes can get quite messy, certainly if you use a lambda and some logic. Delegating the body
  of the lambda to a class method is a good idea. Just be sure that the method returns a hash of some
  sort.</p>
  <pre>named_scope <span class="Constant">:foo</span>, <span class="Keyword">lambda</span> { |*<span class="Identifier">args</span>| foo_parameters(*args) }</pre>
  <p>You can make this into a named_scope generator even, but I&#39;ll save that for another time and post.
  Also, stay tuned for the encore: DRYing up the code for re-use!</p>

toc: 
- anchor: "#toc_0"
  title: The view
- anchor: "#toc_1"
  title: The controller
- anchor: "#toc_2"
  title: The model
- anchor: "#toc_3"
  title: Conclusion
introduction: |-
  <p>Suppose you have an index page with people and you want to have a series of neat filters to show a
  selection of people. For example only the people still alive of only the adults. How would one do
  that?</p><p>I like the method of using a
  <a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/named_scope">named_scope</a> and
  delegating to specified filters. This way, you can structure your filters properly and get clean
  URLs. Also, you can chain other named scopes to the filter.</p><p>This is an example of how I would do that.</p>
